plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'info.solidsoft.pitest' version '1.15.0'
	id 'pmd'
	id 'jacoco'
	id 'pl.allegro.tech.build.axion-release' version '1.15.1'
}

group = 'bot.picture'
project.version = scmVersion.version

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.telegram:telegrambots-spring-boot-starter:6.9.7.1'
	implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'

	testImplementation 'com.h2database:h2'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	testImplementation 'com.google.jimfs:jimfs:1.3.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.11"
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"picturebot/PictureBotApplication.class",
					"picturebot/entities/**/*",
					"picturebot/model/*"
			])
		}))
	}
}

pitest {
	targetClasses = [
			'picturebot.bot.*',
			'picturebot.events.*',
			'picturebot.picture.*',
			'picturebot.scheduler.*',
			'picturebot.user.*'
	]
	excludedClasses = [
	        'picturebot.picture.config.*'
	]
	excludedTestClasses = [
			'picturebot.**.*ApplicationTest*'
	]
	outputFormats = ['XML', 'HTML']
	junit5PluginVersion = '1.0.0'
}

pmd {
	consoleOutput = true
	toolVersion = "6.55.0"
	rulesMinimumPriority = 5
	ruleSetFiles = files("config/pmd/pmd.xml")
	ruleSets = []
}

bootJar {
	manifest {
		attributes 'Implementation-Version': scmVersion.version
	}
}
